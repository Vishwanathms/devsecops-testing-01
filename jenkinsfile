pipeline {
    agent {
        label 'vish-security-agent'
    }
    triggers {
        pollSCM('H/3 * * * *') // checks every 3 mins, or
        // OR use GitHub webhook instead (recommended)
    }
    environment {
        DOCKERHUB_USER = 'vishwacloudlab'
        IMAGE_NAME = 'jenkins-docker-lab'
        SONARQUBE = 'SonarCloud'
        SONAR_TOKEN = credentials('vish-sonarcloud-token')

    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Python Setup & Test with Coverage') {
            steps {
                dir('python_app') {
                    sh '''#!/bin/bash
                        set -euxo pipefail
                        rm -rf venv
                        python3 -m venv venv
                        ./venv/bin/pip install --upgrade pip
                        ./venv/bin/pip install -r requirements.txt
                        ./venv/bin/python -m pytest tests/ --maxfail=1 --disable-warnings -q \
                            --cov=. --cov-report=xml:../coverage.xml
                    '''
                }
            }
        }

        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('SonarCloud') {
        //             sh '''#!/bin/bash
        //                 set -eux
        //                 # Run scanner from repo root; sonar-project.properties defines sources
        //                 sonar-scanner -Dsonar.login=$SONAR_TOKEN
        //             '''
        //         }
        //     }
        // }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'vish-sonarcloud-token', installationName: 'vish-sonarqube') {
                    sh '''#!/bin/bash
                        set -eux
                        echo "=== SonarQube installation ==="
                        export SONAR_SCANNER_VERSION=7.2.0.5079
                        export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
                        curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
                        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
                        export PATH=$SONAR_SCANNER_HOME/bin:$PATH

                        echo "=== Running SonarQube Scanner ==="
                        sonar-scanner \
                        -Dsonar.organization=vishwanathms \
                        -Dsonar.projectKey=Vishwanathms_gameoflife
                    '''
                }
            }
        }
    //                         which sonar-scanner || { echo "Sonar Scanner not found in PATH"; exit 1; }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Clean up image and container') {
            steps {
                script {
               //     sh 'git clone git@github.com:Vishwanathms/t7.14-py-jenkins.git'
                    sh 'docker rm  jenkins_app -f || true'
                    sh 'docker image rmi $DOCKERHUB_USER/$IMAGE_NAME:latest || true' 
                }
            }  
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest python-app'
                    sh 'docker image ls | grep $DOCKERHUB_USER/$IMAGE_NAME'
                }
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                // Scan and save report
                sh '''
                  mkdir -p trivy-reports
                  trivy image --no-progress --exit-code 0 --format table -o trivy-reports/report.txt $DOCKERHUB_USER/$IMAGE_NAME
                  cat trivy-reports/report.txt
                '''
            }
        }
 
        stage('Archive Trivy Report') {
            steps {
                archiveArtifacts artifacts: 'trivy-reports/report.txt', fingerprint: true
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}